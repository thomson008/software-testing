diff --git a/MatchString.java b/MatchString.java
new file mode 100644
index 0000000..f92ea95
--- /dev/null
+++ b/MatchString.java
@@ -0,0 +1,13 @@
+package st1920.automaton;
+
+public class MatchString {
+	private String string;
+
+	public MatchString(String string) {
+		this.string = string;
+	}
+
+	public String getString() {
+		return string;
+	}
+}
diff --git a/MatcherWrapper.java b/MatcherWrapper.java
new file mode 100644
index 0000000..77b06ee
--- /dev/null
+++ b/MatcherWrapper.java
@@ -0,0 +1,122 @@
+package st1920.automaton;
+
+public class MatcherWrapper {
+    public static boolean matches(MatchString m, REString re) {
+        return RegExpMatcher.matches(m.getString(), re.getRegex());
+    }
+
+    // Methods for generating RegExp strings
+    public static REString makeDigit() {
+    	return new REString("8");
+    }
+
+    public static REString makeConcatenation(REString pattern1, REString pattern2) {
+    	return new REString(pattern1.getRegex() + pattern2.getRegex());
+    }
+
+    public static REString makeRangeOfOccurences(REString pattern) {
+    	return new REString(pattern.getRegex() + "{3, 11}");
+    }
+
+    public static REString makeAnd(REString pattern1, REString pattern2) {
+    	return new REString(pattern1.getRegex() + "&" + pattern2.getRegex());
+    }
+
+    public static REString makeRepeatZeroOrOne(REString regExp) {
+        return new REString(regExp.getRegex() + "?");
+    }
+
+    public static REString makeOr(REString pattern1, REString pattern2) {
+        return new REString(pattern1.getRegex() + "|" + pattern2.getRegex());
+    }
+
+    public static REString makeLetterRange() {
+        return new REString("[a-zA-z]");
+    }
+
+    public static REString makeEntireString() {
+    	return new REString("\"aaa\"");
+    }
+
+    public static REString makeAnyString() {
+    	return new REString("@");
+    }
+
+    public static REString makeNoneString() {
+    	return new REString("#");
+    }
+
+    public static REString makeRepeatOnceOrMore(REString pattern) {
+        return new REString(pattern.getRegex() + "+");
+    }
+
+    public static REString makeRepeatZeroOrMore(REString pattern) {
+        return new REString(pattern.getRegex() + "*");
+    }
+
+    public static REString makeNegation(REString pattern) {
+        return new REString("~" + pattern.getRegex());
+    }
+
+    public static REString makeNumberRange() {
+    	return new REString("<4-17>");
+    }
+
+    public static REString makeWildcard() {
+    	return new REString(".");
+    }
+    
+    public static REString makeSpecialCharacter() {
+    	return new REString("\\%");
+    }
+    
+	public static REString makeAlpha() {
+	    return new REString("a");
+	}
+
+	public static REString makeRepeat2() {
+		return new REString("{3,}");
+	}
+	public static REString makeRepeat3() {
+		return new REString("{5}");
+	}
+
+	public static REString makeConcatenation(String l, String r) {
+		return new REString(l + r);
+	}
+
+    // Methods for generating standard match strings
+    public static MatchString makeAlphabet() {
+    	return new MatchString("a");
+    }
+
+    public static MatchString makeNum() {
+    	return new MatchString("8");
+    }
+
+    public static MatchString makeConcatenation(MatchString l, MatchString r) {
+    	return new MatchString(l.getString() + r.getString());
+    }
+    
+    public static MatchString makeSpecialChar() {
+    	return new MatchString("%");
+    }
+}
diff --git a/REString.java b/REString.java
new file mode 100644
index 0000000..06e1201
--- /dev/null
+++ b/REString.java
@@ -0,0 +1,13 @@
+package st1920.automaton;
+
+public class REString {
+    private String regex;
+
+    public REString(String re) {
+        regex = re;
+    }
+
+    public String getRegex() {
+    	return regex;
+    }
+}
